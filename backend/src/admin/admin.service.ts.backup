import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { OnboardingRecord } from '../database/entities/onboarding-record.entity';
import { Merchant } from '../database/entities/merchant.entity';
import { Trainer } from '../database/entities/trainer.entity';
import { TrainingSlot } from '../database/entities/training-slot.entity';
import { TrainingType } from '../database/entities/training-type.entity';
import { DeliveryLocation } from '../database/entities/delivery-location.entity';
import { Holiday } from '../database/entities/holiday.entity';
import { SystemSettings } from '../database/entities/system-settings.entity';

@Injectable()
export class AdminService {
  constructor(
    @InjectRepository(OnboardingRecord)
    private onboardingRepository: Repository<OnboardingRecord>,
    @InjectRepository(Merchant)
    private merchantRepository: Repository<Merchant>,
    @InjectRepository(Trainer)
    private trainerRepository: Repository<Trainer>,
    @InjectRepository(TrainingSlot)
    private trainingSlotRepository: Repository<TrainingSlot>,
    @InjectRepository(TrainingType)
    private trainingTypeRepository: Repository<TrainingType>,
    @InjectRepository(DeliveryLocation)
    private deliveryLocationRepository: Repository<DeliveryLocation>,
    @InjectRepository(Holiday)
    private holidayRepository: Repository<Holiday>,
    @InjectRepository(SystemSettings)
    private systemSettingsRepository: Repository<SystemSettings>,
  ) {}

  async getAllOnboardingRecords(): Promise<OnboardingRecord[]> {
    return this.onboardingRepository.find({
      relations: ['merchant', 'slaBreaches'],
    });
  }

  async getOnboardingById(id: string): Promise<OnboardingRecord> {
    return this.onboardingRepository.findOne({
      where: { id },
      relations: ['merchant', 'slaBreaches'],
    });
  }

  async createOnboardingRecord(data: Partial<OnboardingRecord>): Promise<OnboardingRecord> {
    const onboardingRecord = this.onboardingRepository.create(data);
    return this.onboardingRepository.save(onboardingRecord);
  }

  async updateOnboardingRecord(id: string, data: Partial<OnboardingRecord>): Promise<OnboardingRecord> {
    await this.onboardingRepository.update(id, data);
    return this.getOnboardingById(id);
  }
}
